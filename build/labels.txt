ca65 V2.19 - Git 4dfbccf
Main file   : build/DreamMachine.s
Current file: build/DreamMachine.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.19 - Git 4dfbccf
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.19 - Git 4dfbccf"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.import		_pal_col
000000r 1               	.import		_ppu_wait_nmi
000000r 1               	.import		_ppu_off
000000r 1               	.import		_ppu_on_all
000000r 1               	.import		_music_play
000000r 1               	.import		_bank_bg
000000r 1               	.import		_vram_adr
000000r 1               	.import		_vram_unrle
000000r 1               	.import		_pal_fade_to
000000r 1               	.export		_pal_one
000000r 1               	.export		_senbenstudio
000000r 1               	.export		_temp0
000000r 1               	.export		_pal_senben_studio
000000r 1               	.export		_main
000000r 1               
000000r 1               .segment	"DATA"
000000r 1               
000000r 1               _temp0:
000000r 1  00           	.byte	$00
000001r 1               
000001r 1               .segment	"RODATA"
000000r 1               
000000r 1               _senbenstudio:
000000r 1  01           	.byte	$01
000001r 1  24           	.byte	$24
000002r 1  01           	.byte	$01
000003r 1  FE           	.byte	$FE
000004r 1  24           	.byte	$24
000005r 1  01           	.byte	$01
000006r 1  AB           	.byte	$AB
000007r 1  1C           	.byte	$1C
000008r 1  0E           	.byte	$0E
000009r 1  17           	.byte	$17
00000Ar 1  0B           	.byte	$0B
00000Br 1  0E           	.byte	$0E
00000Cr 1  17           	.byte	$17
00000Dr 1  24           	.byte	$24
00000Er 1  01           	.byte	$01
00000Fr 1  0E           	.byte	$0E
000010r 1  2B           	.byte	$2B
000011r 1  01           	.byte	$01
000012r 1  1F           	.byte	$1F
000013r 1  24           	.byte	$24
000014r 1  01           	.byte	$01
000015r 1  0F           	.byte	$0F
000016r 1  1C           	.byte	$1C
000017r 1  1D           	.byte	$1D
000018r 1  1E           	.byte	$1E
000019r 1  0D           	.byte	$0D
00001Ar 1  12           	.byte	$12
00001Br 1  18           	.byte	$18
00001Cr 1  24           	.byte	$24
00001Dr 1  01           	.byte	$01
00001Er 1  FE           	.byte	$FE
00001Fr 1  24           	.byte	$24
000020r 1  01           	.byte	$01
000021r 1  CA           	.byte	$CA
000022r 1  00           	.byte	$00
000023r 1  01           	.byte	$01
000024r 1  3E           	.byte	$3E
000025r 1  00           	.byte	$00
000026r 1  01           	.byte	$01
000027r 1  00           	.byte	$00
000028r 1               _pal_senben_studio:
000028r 1  0F           	.byte	$0F
000029r 1  05           	.byte	$05
00002Ar 1  13           	.byte	$13
00002Br 1  05           	.byte	$05
00002Cr 1               
00002Cr 1               ; ---------------------------------------------------------------
00002Cr 1               ; void __near__ pal_one (const unsigned char *pal, unsigned char index_from)
00002Cr 1               ; ---------------------------------------------------------------
00002Cr 1               
00002Cr 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_pal_one: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1               ;
000000r 1               ; void pal_one(const u8 pal[4], u8 index_from){
000000r 1               ;
000000r 1  20 rr rr     	jsr     pusha
000003r 1               ;
000003r 1               ; pal_col(index_from, pal[0]);
000003r 1               ;
000003r 1  A0 00        	ldy     #$00
000005r 1  A2 00        	ldx     #$00
000007r 1  B1 rr        	lda     (sp),y
000009r 1  20 rr rr     	jsr     pusha
00000Cr 1  A0 03        	ldy     #$03
00000Er 1  20 rr rr     	jsr     ldaxysp
000011r 1  A0 00        	ldy     #$00
000013r 1  20 rr rr     	jsr     ldauidx
000016r 1  20 rr rr     	jsr     _pal_col
000019r 1               ;
000019r 1               ; pal_col(index_from+1, pal[1]);
000019r 1               ;
000019r 1  A0 00        	ldy     #$00
00001Br 1  A2 00        	ldx     #$00
00001Dr 1  B1 rr        	lda     (sp),y
00001Fr 1  20 rr rr     	jsr     incax1
000022r 1  A2 00        	ldx     #$00
000024r 1  20 rr rr     	jsr     pusha
000027r 1  A0 03        	ldy     #$03
000029r 1  20 rr rr     	jsr     ldaxysp
00002Cr 1  20 rr rr     	jsr     incax1
00002Fr 1  A0 00        	ldy     #$00
000031r 1  20 rr rr     	jsr     ldauidx
000034r 1  20 rr rr     	jsr     _pal_col
000037r 1               ;
000037r 1               ; pal_col(index_from+2, pal[2]);
000037r 1               ;
000037r 1  A0 00        	ldy     #$00
000039r 1  A2 00        	ldx     #$00
00003Br 1  B1 rr        	lda     (sp),y
00003Dr 1  20 rr rr     	jsr     incax2
000040r 1  A2 00        	ldx     #$00
000042r 1  20 rr rr     	jsr     pusha
000045r 1  A0 03        	ldy     #$03
000047r 1  20 rr rr     	jsr     ldaxysp
00004Ar 1  20 rr rr     	jsr     incax2
00004Dr 1  A0 00        	ldy     #$00
00004Fr 1  20 rr rr     	jsr     ldauidx
000052r 1  20 rr rr     	jsr     _pal_col
000055r 1               ;
000055r 1               ; pal_col(index_from+3, pal[3]);
000055r 1               ;
000055r 1  A0 00        	ldy     #$00
000057r 1  A2 00        	ldx     #$00
000059r 1  B1 rr        	lda     (sp),y
00005Br 1  20 rr rr     	jsr     incax3
00005Er 1  A2 00        	ldx     #$00
000060r 1  20 rr rr     	jsr     pusha
000063r 1  A0 03        	ldy     #$03
000065r 1  20 rr rr     	jsr     ldaxysp
000068r 1  20 rr rr     	jsr     incax3
00006Br 1  A0 00        	ldy     #$00
00006Dr 1  20 rr rr     	jsr     ldauidx
000070r 1  20 rr rr     	jsr     _pal_col
000073r 1               ;
000073r 1               ; }
000073r 1               ;
000073r 1  20 rr rr     	jsr     incsp3
000076r 1  60           	rts
000077r 1               
000077r 1               .endproc
000077r 1               
000077r 1               ; ---------------------------------------------------------------
000077r 1               ; void __near__ main (void)
000077r 1               ; ---------------------------------------------------------------
000077r 1               
000077r 1               .segment	"CODE"
000077r 1               
000077r 1               .proc	_main: near
000077r 1               
000077r 1               .segment	"CODE"
000077r 1               
000077r 1               ;
000077r 1               ; ppu_off();
000077r 1               ;
000077r 1  20 rr rr     	jsr     _ppu_off
00007Ar 1               ;
00007Ar 1               ; bank_bg(1);
00007Ar 1               ;
00007Ar 1  A2 00        	ldx     #$00
00007Cr 1  A9 01        	lda     #$01
00007Er 1  20 rr rr     	jsr     _bank_bg
000081r 1               ;
000081r 1               ; vram_adr(NAMETABLE_A);
000081r 1               ;
000081r 1  A2 20        	ldx     #$20
000083r 1  A9 00        	lda     #$00
000085r 1  20 rr rr     	jsr     _vram_adr
000088r 1               ;
000088r 1               ; vram_unrle(senbenstudio);
000088r 1               ;
000088r 1  A9 rr        	lda     #<(_senbenstudio)
00008Ar 1  A2 rr        	ldx     #>(_senbenstudio)
00008Cr 1  20 rr rr     	jsr     _vram_unrle
00008Fr 1               ;
00008Fr 1               ; pal_one(pal_senben_studio, 0);
00008Fr 1               ;
00008Fr 1  A9 rr        	lda     #<(_pal_senben_studio)
000091r 1  A2 rr        	ldx     #>(_pal_senben_studio)
000093r 1  20 rr rr     	jsr     pushax
000096r 1  A2 00        	ldx     #$00
000098r 1  A9 00        	lda     #$00
00009Ar 1  20 rr rr     	jsr     _pal_one
00009Dr 1               ;
00009Dr 1               ; ppu_wait_nmi();
00009Dr 1               ;
00009Dr 1  20 rr rr     	jsr     _ppu_wait_nmi
0000A0r 1               ;
0000A0r 1               ; pal_fade_to(0, 4);
0000A0r 1               ;
0000A0r 1  A2 00        	ldx     #$00
0000A2r 1  A9 00        	lda     #$00
0000A4r 1  20 rr rr     	jsr     pusha
0000A7r 1  A2 00        	ldx     #$00
0000A9r 1  A9 04        	lda     #$04
0000ABr 1  20 rr rr     	jsr     _pal_fade_to
0000AEr 1               ;
0000AEr 1               ; ppu_on_all();
0000AEr 1               ;
0000AEr 1  20 rr rr     	jsr     _ppu_on_all
0000B1r 1               ;
0000B1r 1               ; music_play(0);
0000B1r 1               ;
0000B1r 1  A2 00        	ldx     #$00
0000B3r 1  A9 00        	lda     #$00
0000B5r 1  20 rr rr     	jsr     _music_play
0000B8r 1               ;
0000B8r 1               ; temp0=30;
0000B8r 1               ;
0000B8r 1  A2 00        	ldx     #$00
0000BAr 1  A9 1E        	lda     #$1E
0000BCr 1  8D rr rr     	sta     _temp0
0000BFr 1               ;
0000BFr 1               ; while(temp0>0)ppu_wait_nmi();
0000BFr 1               ;
0000BFr 1  4C rr rr     	jmp     L0004
0000C2r 1  20 rr rr     L0002:	jsr     _ppu_wait_nmi
0000C5r 1  A2 00        L0004:	ldx     #$00
0000C7r 1  AD rr rr     	lda     _temp0
0000CAr 1  C9 00        	cmp     #$00
0000CCr 1  20 rr rr     	jsr     boolne
0000CFr 1  D0 F1        	jne     L0002
0000D1r 1               ;
0000D1r 1               ; pal_fade_to(4, 0);
0000D1r 1               ;
0000D1r 1  A2 00        	ldx     #$00
0000D3r 1  A9 04        	lda     #$04
0000D5r 1  20 rr rr     	jsr     pusha
0000D8r 1  A2 00        	ldx     #$00
0000DAr 1  A9 00        	lda     #$00
0000DCr 1  20 rr rr     	jsr     _pal_fade_to
0000DFr 1               ;
0000DFr 1               ; while (1){
0000DFr 1               ;
0000DFr 1  4C rr rr     	jmp     L0007
0000E2r 1               ;
0000E2r 1               ; ppu_wait_nmi();
0000E2r 1               ;
0000E2r 1  20 rr rr     L0005:	jsr     _ppu_wait_nmi
0000E5r 1               ;
0000E5r 1               ; while (1){
0000E5r 1               ;
0000E5r 1  4C rr rr     L0007:	jmp     L0005
0000E8r 1               ;
0000E8r 1               ; }
0000E8r 1               ;
0000E8r 1  60           	rts
0000E9r 1               
0000E9r 1               .endproc
0000E9r 1               
0000E9r 1               
